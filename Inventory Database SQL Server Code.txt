--Table Creation

create table Assettype (type varchar(20) PRIMARY KEY)

create table Location (locationid int identity(1,1) PRIMARY KEY, room numeric(3,0) NOT NULL, floor numeric(1,0) NOT NULL)

create table Vendor (vendorid int identity(1,1) PRIMARY KEY, vendorname varchar(30) NOT NULL, addressnumber numeric(8,0), streetname varchar(30) NOT NULL, state char(2) NOT NULL)

create table Department (departmentid int identity(1,1) PRIMARY KEY, name varchar(30), locationid int, CONSTRAINT departmentlocationfk FOREIGN KEY (locationid) REFERENCES Location(locationid))

create table Purchaseorder (purchaseorderid int identity(1,1) PRIMARY KEY, invoicenumber varchar(10) NOT NULL, invoicedate datetime NOT NULL, vendorid int, CONSTRAINT vendoridfk FOREIGN KEY (vendorid) REFERENCES Vendor(vendorid), amount numeric(8,2) NOT NULL)

create table Asset (assetid int identity(1,1) PRIMARY KEY, description varchar(50) NOT NULL, cost numeric(8,2) NOT NULL, estimatedlife numeric(2,0) NOT NULL, purchaseorderid int, CONSTRAINT purchaseorderfk FOREIGN KEY (purchaseorderid) REFERENCES Purchaseorder(purchaseorderid), type varchar(20), CONSTRAINT typefk FOREIGN KEY (type) REFERENCES Assettype(type), departmentid int, CONSTRAINT departmentfk FOREIGN KEY (departmentid) REFERENCES Department(departmentid))


insert into Assettype (type)
	values ('projector'),
	('laptop'),
	('projector control'),
	('printer'),
	('touch screen tv'),
	('desktop computer'),
	('monitor')

insert into Location (room, floor)
	values (101,1),
	(102,1),
	(103,1),
	(201,2),
	(202,2),
	(203,2),
	(301,3),
	(302,3),
	(303,3)

insert into Vendor (vendorname, addressnumber, streetname, state)
	values ('Office Depot',17560,'White Marsh Avenue','MD'),
	('Dell',515,'Spring Lane','CA'),
	('Lenova',725,'Springfield Boulevard','MI'),
	('Amazon',720,'Sunshine Road','WA'),
	('Visual Sound',720,'Sunshine Road','WA')

insert into Department (name, locationid)
	values ('Accounting',1),
	('Finance',2),
	('Marketing',3),
	('Sales',4),
	('IT Help Desk',5),
	('Business Intelligence',6),
	('Networking',7),
	('Tax',8),
	('Budget',9)

insert into Purchaseorder (invoicenumber, invoicedate, vendorid, amount)
	values ('0000006780','2020-07-08T14:11:25',2,578.20),
	('0000005520','2020-09-02T13:13:25',5,3520.75),
	('0000004530','2021-01-01T08:11:25',5,1531.20),
	('0000002250','2020-08-05T09:15:25',1,862.20)

insert into Asset (description, cost, estimatedlife, purchaseorderid, type, departmentid)
	values ('Optiplex 5050'578.20,5,1,6,1),
	('Crestron 550',3520.75,5,2,3,4),
	('Sony A7000',1531.20,5,3,1,4),
	('MSI 550',862.20,5,4,2,2)

--Bulk upload for assets into the asset table
Bulk insert Asset
From 'C:\Users\User\Documents\AIT735\AIT 735 Bulk Upload for Assets.csv'
With
(
Rowterminator = '\n',
Fieldterminator = ','
)
	


Alter table Asset
Add Check (cost >= 0)

Alter table Asset
Add Check (estimatedlife > 0)

Alter table Location
Add Check (room > 0)

Alter table Location
Add Check (floor >= 0)

Alter table Purchaseorder
Add Check (invoicedate > '1910-01-01T00:00:00' AND invoicedate < GETDATE())

Alter table Purchaseorder
Add Check (amount >= 0)

--Requirement 1

--Variables

create proc asset_add
(@description varchar(50), @cost numeric(8,2), @estimatedlife numeric(2,0), @purchaseorderid int, @type varchar(20), @departmentid int)
as
begin

	--Check to make sure purchaseorder exists before adding asset


	if not exists (select 1 from Purchaseorder where @purchaseorderid = purchaseorderid)
	begin
		print 'Purchaseorder does not exist'
		print 'Failed Insertion'
		return
	end
	
	--Check to make sure asset being added is not a duplicate

	if exists (select 1 from Asset where upper(@description) + CAST(@purchaseorderid AS varchar) = upper(description) + Cast(purchaseorderid as varchar))
	begin
		print 'Asset already exists'
		print 'Failed Insertion'
		return
	end

	--Check to make sure department exists before adding asset

	if not exists (select 1 from Department where @departmentid = departmentid)
	begin
		print 'Department does not exist'
		print 'Failed Insertion'
		return
	end

	--Check to make sure asset type exists before adding asset

	if not exists (select 1 from Assettype where upper(@type) = upper(type))
	begin
		print 'Asset type does not exist'
		print 'Failed Insertion'
		return
	end
	
	--If the purchaseorder and location does exist. Allow transaction to go through

	begin transaction
		insert into Asset (description, cost, estimatedlife, purchaseorderid, type, departmentid) values
		(@description, @cost, @estimatedlife, @purchaseorderid, @type, @departmentid)
		
		if @@error <> 0
			begin
				rollback transaction
				print 'Failed Insertion'
				return
			end

		print 'Asset added'

	commit transaction
end


--Test
--Successful add
execute asset_add '55in Samsung Touch Screen', 2255.30, 10, 1, 'touch screen tv' , 3

--Purchase order that does not exist error
execute asset_add '60in Samsung Touch Screen', 2255.30, 10, 100, 'touch screen tv' , 3

--Test Duplicate asset error
execute asset_add '55in Samsung Touch Screen', 2255.30, 10, 5, 'touch screen tv' , 3

--Test Department does not exist error
execute asset_add '75in Samsung Touch Screen', 2255.30, 10, 5, 'touch screen tv' , 100

--Test Asset type does not exist error
execute asset_add '75in Samsung Touch Screen', 2255.30, 10, 5, 'test' , 3




--Trigger Requirement1
--Using a trigger, every time assets are added, 
--increase amount of the purchase order by cost of the asset


create trigger trg_asset_amount_compare
on Asset
for insert
as
begin
	declare @cost numeric(8,2)
	declare @purchaseorderid int
	select @cost = (select cost from inserted)
	select @purchaseorderid = (select purchaseorderid from inserted)

	update Purchaseorder
	set Purchaseorder.amount = Purchaseorder.amount + @cost
	from Purchaseorder where purchaseorderid = @purchaseorderid

	If @@error <> 0
	begin
		rollback transaction
		print 'purchaseorder amount updated as well'
	end
end



Requirement 2

--Variables

create proc asset_updatecost
(@assetid int, @cost numeric(6,2))
as
begin



	--Tests to see if the assetid to be updated exists in the Asset table. If not, rollback transaction

	if not exists (select 1 from Asset where  @assetid = assetid)
		begin
			print 'Incorrect Asset Id'
			print 'Failed Update'
			return
		end

	--If assetid exists. Allow transaction to go through

	begin transaction
		update Asset
		set cost = @cost where assetid = @assetid

		if @@error <> 0
			begin
				rollback transaction
				print 'Update Failed'
				return
			end
		print 'Update is Successful'

	commit transaction
end


--Trigger

create trigger trg_asset_amount_update
on Asset
for update
as
begin

--Variables

	declare @purchaseorderid int
	declare @equipmentid int
	declare @equipmentid2 int
	declare @cost numeric(8,2)
	declare @cost2 numeric(8,2)
	declare @cost3 numeric(8,2)

--Subtracting amounts between old and new cost

	select @equipmentid = (select assetid from inserted)
	select @cost2 = (select cost from deleted)
	select @cost = (select cost from inserted)
	select @cost3 = @cost - @cost2
	select @purchaseorderid = (select purchaseorderid from inserted)

--Adding the net cost to the purchase order amount

	update Purchaseorder
	set  Purchaseorder.amount = Purchaseorder.amount + @cost3
	from Purchaseorder
	where purchaseorderid = @purchaseorderid	 


--If there is an error, rollback transaction

	If @@error <> 0
	begin
		rollback transaction
	end
end


--Test successful update
execute asset_updatecost 6,1255.30

--Test update on asset that does not exist
execute asset_updatecost 100,1255.30



Requirement 3

--Variables

create proc asset_display
(@assetid int)
as
begin


	--Tests to see if the assetid to be updated exists in the Asset table. If not, rollback transaction

	if not exists (select 1 from Asset where  @assetid = assetid)
		begin
			print 'Incorrect asset Id'
			print 'Failed Display'
			return
		end

	--If asset exists, allow transaction to go through

	begin transaction
		select @assetid as assetid, description, cost, estimatedlife, purchaseorderid, departmentid
		from Asset where @assetid = assetid

		if @@error <> 0
			begin
				rollback transaction
				print 'Failed Display'
				return
			end

		print 'Display is Successful'

	commit transaction
end


--Test successful display
execute asset_display 1

--Test display on asset that does not exist
execute asset_display 100


Requirement 4

--Variables

create proc asset_delete
(@assetid int)
as
begin


	--Tests to see if the assetid to be deleted exists in the Asset table. If not, rollback transaction

	if not exists (select 1 from Asset where  @assetid = assetid)
		begin
			print 'Incorrect asset Id'
			print 'Failed Deletion'
			return
		end

	--If Asset exists, allow transaction to go through

	begin transaction
		delete from Asset where @assetid = assetid

		if @@error <> 0
			begin
				rollback transaction
				print 'Failed Deletion'
				return
			end

		print 'Deletion is Successful'

	commit transaction
end

--Trigger Requirement5
--Using a trigger, every time assets are deleted, 
--decrease amount of the purchase order by cost of the asset


create trigger trg_asset_amount_delete
on Asset
for delete
as
begin

--Variables

	declare @cost numeric(8,2)
	declare @purchaseorderid int

--Obtaining the purchaseorder id and cost from asset that was deleted

	select @cost = (select cost from deleted)
	select @purchaseorderid = (select purchaseorderid from deleted)

--Update purchase order amount by taking the deleted cost and subtracting from purchase order amount

	update Purchaseorder
	set Purchaseorder.amount = Purchaseorder.amount - @cost
	from Purchaseorder where purchaseorderid = @purchaseorderid

	If @@error <> 0
	begin
		rollback transaction
		print 'purchaseorder amount updated as well'
	end
end

--Test successful deletion
execute asset_delete 6

--Test deletion on asset that does not exist
execute asset_delete 100

Requirement 5

--Variables

create proc location_add
(@room numeric(3,0), @floor numeric(2,0))
as
begin



	--Check to make sure location being added is not a duplicate


	if exists (select 1 from Location where @room + @floor = room + floor)
	begin
		print 'Location already exists'
		print 'Failed Insertion'
		return
	end
	

	--If the location does not already exist. Allow transaction to go through

	begin transaction
		insert into Location values
		(@room, @floor)
		
		if @@error <> 0
			begin
				rollback transaction
				print 'Failed Insertion'
				return
			end

		print 'Location added'

	commit transaction
end


--Test
--Successful add test
execute location_add 104,1

--Duplicate location error
execute location_add 103,1



Requirement 6

--Variables

create proc location_update
(@locationid int, @room numeric(3,0), @floor numeric(2,0))
as
begin



	--Tests to see if the locationid to be updated exists in the Location table. If not, rollback transaction

	if not exists (select 1 from Location where  @locationid = locationid)
		begin
			print 'Incorrect Location Id'
			print 'Failed Update'
			return
		end

	--If locationid exists. Allow transaction to go through

	begin transaction
		update Location
		set room = @room, floor = @floor where locationid = @locationid

		if @@error <> 0
			begin
				rollback transaction
				print 'Update Failed'
				return
			end
		print 'Update is Successful'

	commit transaction
end


--test
--successful update
execute location_update 1,107,1

--test location that does not exist
execute location_update 100,120,1


Requirement 7

--Variables

create proc location_delete
(@locationid int)
as
begin


	--Tests to see if the locationid to be deleted exists in the Location table. If not, rollback transaction

	if not exists (select 1 from Location where  @locationid = locationid)
		begin
			print 'Incorrect Location Id'
			print 'Failed Deletion'
			return
		end

	begin transaction
		delete from Location where @locationid = locationid

		if @@error <> 0
			begin
				rollback transaction
				print 'Failed Deletion'
				return
			end

		print 'Deletion is Successful'

	commit transaction
end


--test
--successful deletion
execute location_delete 9

--test location that does not exist
execute location_update 100


Requirement 8

--Variables

create proc vendor_add
(@vendorname varchar(30), @addressnumber numeric(8,0), @streetname varchar(30), @state char(2))
as
begin



	--Check to make sure vendor being added is not a duplicate


	if exists (select 1 from Vendor where upper(@vendorname) + Cast(@addressnumber AS varchar) + upper(@streetname) + upper(@state) = upper(vendorname) + Cast(addressnumber as varchar) + upper(streetname) + upper(state))
	begin
		print 'Vendor already exists'
		print 'Failed Insertion'
		return
	end
	

	--If the vendor does not already exist. Allow transaction to go through

	begin transaction
		insert into Vendor values
		(@vendorname, @addressnumber, @streetname, @state)
		
		if @@error <> 0
			begin
				rollback transaction
				print 'Failed Insertion'
				return
			end

		print 'Vendor added'

	commit transaction
end

--test
--successful addition
execute vendor_add 'Intel', 77, 'Sky Road', 'FL'

--test duplicate vendor
execute location_update 100




Requirement 9

--Variables

create proc vendor_update
(@vendorid int, @addressnumber numeric(8,0), @streetname varchar(30))
as
begin



	--Tests to see if the vendorid to be updated exists in the Vendor table. If not, rollback transaction

	if not exists (select 1 from Vendor where  @vendorid = vendorid)
		begin
			print 'Incorrect Vendor Id'
			print 'Failed Update'
			return
		end

	--If locationid exists. Allow transaction to go through

	begin transaction
		update Vendor
		set addressnumber = @addressnumber, streetname = @streetname where vendorid = @vendorid

		if @@error <> 0
			begin
				rollback transaction
				print 'Update Failed'
				return
			end
		print 'Update is Successful'

	commit transaction
end


--test
--successful vendor address update
execute vendor_update 6, 80, 'Skyridge Road'

--test vendor that does not exist
execute vendor_update 100, 80, 'Skyridge Road'



Requirement 10

--Variables

create proc vendor_delete
(@vendorid int)
as
begin


	--Tests to see if the vendorid to be deleted exists in the Vendor table. If not, rollback transaction

	if not exists (select 1 from Vendor where  @vendorid = vendorid)
		begin
			print 'Incorrect Vendor Id'
			print 'Failed Deletion'
			return
		end

	begin transaction
		delete from Vendor where @vendorid = vendorid

		if @@error <> 0
			begin
				rollback transaction
				print 'Failed Deletion'
				return
			end

		print 'Deletion is Successful'

	commit transaction
end



--test
--successful vendor deletion
execute vendor_delete 6

--test vendor that does not exist
execute vendor_delete 100

--test unsuccessful deletion of vendor that is affiliated with purchase order
execute vendor_delete 1



Requirement 11

--Variables

create proc vendor_display
(@vendorid int)
as
begin


	--Tests to see if the vendorid exists in the Vendor table. If not, rollback transaction

	if not exists (select 1 from Vendor where  @vendorid = vendorid)
		begin
			print 'Incorrect Vendor Id'
			print 'Failed Display'
			return
		end

	begin transaction
		select @vendorid as vendorid, vendorname, addressnumber, streetname
		from Vendor where @vendorid = vendorid

		if @@error <> 0
			begin
				rollback transaction
				print 'Failed Display'
				return
			end

		print 'Display is Successful'

	commit transaction
end


--test
--successful vendor display
execute vendor_display 1

--test vendor that does not exist
execute vendor_delete 100


Requirement 12

--Variables

create proc purchaseorder_add
(@invoicenumber varchar(10), @invoicedate datetime, @vendorid int, @amount numeric(7,2))
as
begin



	--Check to make sure Vendor exists before adding purchaseorder


	if not exists (select 1 from Vendor where @vendorid = vendorid)
	begin
		print 'Vendor does not exist'
		print 'Failed Insertion'
		return
	end

	--Check to make sure invoice number being used is not a duplicate


	if exists (select 1 from Purchaseorder where @invoicenumber = invoicenumber)
	begin
		print 'Invoice already exists'
		print 'Failed Insertion'
		return
	end

	--Check to make sure amount is zero


	if @amount <> 0
	begin
		print 'Amount needs to be zero'
		print 'Failed Insertion'
		return
	end


	--If the vendor does exist. Allow transaction to go through

	begin transaction
		insert into Purchaseorder values
		(@invoicenumber, @invoicedate, @vendorid, @amount)
		
		if @@error <> 0
			begin
				rollback transaction
				print 'Failed Insertion'
				return
			end

		print 'Purchaseorder added'

	commit transaction
end


--test
--successful purchaseorder add
execute purchaseorder_add AN0123, '2020-12-28T14:11:25', 3, 0


--vendor that does not exist
execute purchaseorder_add AN0124, '2020-12-28T14:11:25', 100, 0


--duplicate invoice number
execute purchaseorder_add AN0123, '2020-12-28T14:11:25', 3, 0


--purchase order amount needs to be zero
execute purchaseorder_add AN0124, '2020-12-28T14:11:25', 3, 25



Requirement 13

--Variables

create proc purchaseorder_display
(@purchaseorderid int)
as
begin


	--Tests to see if the purchaseorderid exists in the Purchaseorder table. If not, rollback transaction

	if not exists (select 1 from Purchaseorder where  @purchaseorderid = purchaseorderid)
		begin
			print 'Incorrect Purchaseorder Id'
			print 'Failed Display'
			return
		end

	begin transaction
		select @purchaseorderid, Purchaseorder.invoicenumber, Purchaseorder.invoicedate, Purchaseorder.vendorid, Asset.assetid, Asset.description, Asset.cost
		from Purchaseorder 
		INNER JOIN Asset
		ON Purchaseorder.purchaseorderid = Asset.purchaseorderid
		where @purchaseorderid = purchaseorderid

		if @@error <> 0
			begin
				rollback transaction
				print 'Failed Display'
				return
			end

		print 'Display is Successful'

	commit transaction
end


--test
--test successful purchaseorder display
execute purchaseorder_display 1


--purchase order that does not exist
execute purchaseorder_display 100





Requirement 14

--Variables

create proc type_add
(@type varchar(20))
as
begin



	--Check to make sure type being added is not a duplicate


	if exists (select 1 from Assettype where upper(@type) = upper(type))
	begin
		print 'Type already exists'
		print 'Failed Insertion'
		return
	end
	

	--If the type does not already exist. Allow transaction to go through

	begin transaction
		insert into Assettype values
		(@type)
		
		if @@error <> 0
			begin
				rollback transaction
				print 'Failed Insertion'
				return
			end

		print 'Type added'

	commit transaction
end


--test
--test successful addition of an asset type
execute type_add 'server'


--test for duplicate asset types
execute type_add 'laptop'



Requirement 15


--Variables

create proc department_add
(@name varchar(30), @locationid int)
as
begin



	--Check to make sure location exists before Department is added


	if not exists (select 1 from Location where @locationid = locationid)
	begin
		print 'Location does not exist'
		print 'Failed Insertion'
		return
	end


	--Check to make sure department being added is not a duplicate


	if exists (select 1 from Department where upper(@name) = upper(name))
	begin
		print 'Department already exists'
		print 'Failed Insertion'
		return
	end
	

	--If the location does exist. Allow transaction to go through

	begin transaction
		insert into Department values
		(@name, @locationid)
		
		if @@error <> 0
			begin
				rollback transaction
				print 'Failed Insertion'
				return
			end

		print 'Department added', 10

	commit transaction
end


--test
--test successful addition of a department
execute department_add 'Operations', 11


--test for location that does not exist
execute department_add 'Transportation', 100

--test for duplicate location
execute department_add 'Accounting', 1



Requirement 16

--Variables

create proc department_delete
(@departmentid int)
as
begin


	--Tests to see if the departmentid to be deleted exists in the Department table. If not, rollback transaction

	if not exists (select 1 from Department where  @departmentid = departmentid)
		begin
			print 'Incorrect Department Id'
			print 'Failed Deletion'
			return
		end

	begin transaction
		delete from Department where @departmentid = departmentid

		if @@error <> 0
			begin
				rollback transaction
				print 'Failed Deletion'
				return
			end

		print 'Deletion is Successful'

	commit transaction
end


--test
--test successful deletion of a department
execute department_delete 10


--test for department that does not exist
execute department_delete 100


--test for department that is being used by an asset
execute department_delete 1



Requirement 17

--Variables

create proc department_update
(@departmentid int, @name varchar(30))
as
begin



	--Tests to see if the departmentid to be updated exists in the Department table. If not, rollback transaction

	if not exists (select 1 from Department where  @departmentid = departmentid)
		begin
			print 'Incorrect Department Id'
			print 'Failed Update'
			return
		end

	--If departmentid exists. Allow transaction to go through

	begin transaction
		update Department
		set name = @name where departmentid = @departmentid

		if @@error <> 0
			begin
				rollback transaction
				print 'Update Failed'
				return
			end
		print 'Update is Successful'

	commit transaction
end	


--test
--test successful update of a department
execute department_update 9,'Financial Services'


--test for department that does not exist
execute department_update 100, 'Test Department'



Requirement 18

--Variables

create proc department_display
(@departmentid int)
as
begin


	--Tests to see if the departmentid exists in the Department table. If not, rollback transaction

	if not exists (select 1 from Department where  @departmentid = departmentid)
		begin
			print 'Incorrect Department Id'
			print 'Failed Display'
			return
		end

	begin transaction
		select @departmentid, Department.name, Department.locationid, Asset.description, Asset.cost
		from Department
		INNER JOIN Asset
		ON Department.departmentid = Asset.departmentid
		where @departmentid = Department.departmentid

		if @@error <> 0
			begin
				rollback transaction
				print 'Failed Display'
				return
			end

		print 'Display is Successful'

	commit transaction
end

--test
--test successful viewing of assets given a department
execute department_display 4

--test for department that does not exist
execute department_display 100


Requirement 22

--Variables

create proc location_asset_display
(@locationid int)
as
begin


	--Tests to see if the locationid exists in the Location table. If not, rollback transaction

	if not exists (select 1 from Location where  @locationid = locationid)
		begin
			print 'Incorrect Location Id'
			print 'Failed Display'
			return
		end

	begin transaction
		select @locationid, Location.room, Location.floor, Asset.assetid, Asset.description, Asset.cost
		from Asset
		INNER JOIN Department
		ON Asset.departmentid = Department.departmentid
		INNER JOIN Location
		ON Department.locationid = Location.locationid
		where @locationid = Location.locationid		

		if @@error <> 0
			begin
				rollback transaction
				print 'Failed Display'
				return
			end

		print 'Display is Successful'

	commit transaction
end


--test
--test successful viewing of assets given a department
execute location_asset_display 4

--test for department that does not exist
execute location_asset_display 100



Requirement 23

--Variable

create proc identify_assetid
(@paramdescription varchar(50))
as
begin

--Wildcard search for asset by description

	begin transaction
		select assetid, description, cost
		from Asset
		where upper(description) like upper(CONCAT('%',@paramdescription,'%'))

--If there is an asset that matches description, the results will appear

		if @@error <> 0
			begin
				rollback transaction
				print 'Failed Display'
				return
			end

		print 'Display is Successful'

	commit transaction
end

--test
--test successful search for an asset given description
execute identify_assetid Optiplex


--test
--test unsuccessful search for an asset given description
execute identify_assetid test



Requirement 24

--Index to optimize search speed for the state column in ascending order

create index vendor_state
on Vendor(state ASC);

https://www.youtube.com/watch?v=i_FwqzYMUvk&ab_channel=kudvenkat

--Variable

create proc vendor_state
(@paramstate char(2))
as
begin

--Using a wildcard, find the vendors in a given state

	begin transaction
		select vendorname, addressnumber, streetname, state
		from Vendor
		where state = @paramstate

		if @@error <> 0
			begin
				rollback transaction
				print 'Failed Display'
				return
			end

		print 'Display is Successful'

	commit transaction
end

--test to find vendor in state of MD
execute vendor_state 'MD'

--test for no vendors in a state
execute vendor_state 'MO'



Requirement 25

--Variables

create proc identify_purchaseorder
(@paraminvoice varchar(10))
as
begin

--Wildcard search for purchase order by invoice number

	begin transaction
		select purchaseorderid, invoicenumber, invoicedate, amount
		from Purchaseorder
		where upper(invoicenumber) like upper(CONCAT('%',@paraminvoice,'%'))

--If a purchase order matches the invoice number, results will appear

		if @@error <> 0
			begin
				rollback transaction
				print 'Failed Display'
				return
			end

		print 'Display is Successful'

	commit transaction
end

--test
--test successful search for a purchase order given invoicenumber
execute identify_purchaseorder 530


--test
--test unsuccessful search for a purchase order given invoicenumber
execute identify_purchaseorder test


--Variables

declare @name varchar(200)
declare @path varchar(250)
declare @filename varchar(250)
declare @date varchar(20)

--location of backup

set @path = 'C:\Program Files\Microsoft SQL ServerExpress\MSSQL15.SQLEXPRESS\MSSQL\Backup\TowsonCorporation.bak'

--filename format with date and time

select @date = convert(varchar(20),GETDATE(),112) + replace(convert(varchar(20),getdate(),108),':','')


--gathering all data in the database not in master, model, msdb, tempdb

declare backup_cursor cursor for
select name
from TowsonCorporation.dbo.sysdatabases
where name NOT IN ('master','model','msdb','tempdb')

Open backup_cursor


--putting values from cursor into the variables

FETCH NEXT from backup_cursor INTO @name

--0 verifies that record exists, the loop will continue while records exist

While @@FETCH_STATUS = 0

begin
	set @filename = @path + @name + '_' + @date + '.BAK'
	backup database @name TO DISK = @filename
	FETCH NEXT FROM backup_cursor INTO @name
end

--removes the cursor reference and drops it

close backup_cursor
deallocate backup_cursor





